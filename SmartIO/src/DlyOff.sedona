//
// Copyright (c) 2007 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   10 Jan 07  Andy Saunders      Creation
//   27 Apr 07  Brian Frank        Port from Java to Sedona
//   22 Apr 09  Elizabeth McKenney Simplified logic
//

**
** DlyOff Delay Off object
**
**    Delays the on to off transition by a time delay
**
@niagaraIcon="module://icons/x16/control/control.png"
class DlyOff
  extends Component
{
    @readonly
    @allowNull=false
    @trueText="On" @falseText="Off"		
	property bool out ;

    @summary
    @config
    @allowNull=false
    @trueText="On" @falseText="Off"	
    property bool in ;

  @config @summary property float delayTime  // specified hold time in sec
  @readonly property int hold                // remaining hold time in ms


  **
  ** Callback when component is first started in an app.
  **
  virtual override void start()
  {
    // Must initialize lastIn before first call to execute()
    lastIn = in    
  }


  **
  ** Execute is called once every scan.
  **
  virtual override void execute()
  {
    long now = Sys.ticks()

    // On negative edge transition, start delay
    if (!in && lastIn)
    {
      delayEnd = now + (long)delayTime * 1sec
    }
        
    // If input is true, cancel any delay and set output true
    if (in)
    {
      delayEnd = 0L
      out = true
    }
    // If input is false, output is true if delay not expired;
    // o/w output is false and delay timer is reset
    else
    {
      out = delayEnd > now

      // If out is false, delay has expired
      if (!out) delayEnd = 0L
    }

    // Update hold property to reflect delay time remaining
    if (delayEnd == 0L)
      hold = 0
    else
      hold = (int)(delayEnd - now)

    lastIn = in
  }

  private long delayEnd = 0L
  private bool lastIn

}
