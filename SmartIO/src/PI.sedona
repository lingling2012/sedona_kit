//
// Copyright (c) 2007 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   10 Jan 07  Andy Saunders  Creation
//   27 Apr 07  Brian Frank    Port from Java to Sedona
//   22 Apr 09  Elizabeth McKenney   Updated
//   29 Jul 09  Refactored to add computeConstants private method to fix scaledMin/scaledMax
//              not being recomputed whenever ki or kp changed.
//

**
** Pid Loop object
**
@niagaraIcon="module://icons/x16/control/numericPoint.png"
class PI
  extends Component
{
  @config 
  @allowNull=false
  @trueText="On" @falseText="Off"
  property bool enable = true
  @config @summary property float sp    = 0.0f

  @precision=4 property float cv    = 0.0f
  @readonly property float out

  @config @precision=4 property float kp = 15.0f
  @config @precision=4 property float ki = 0.1f  // units repeats / minute
  @config @precision=4 property float kd = 0.01f

  @config @precision=4 property float max   = 100.0f
  @config @precision=4 property float min   = 0.0f
  @config @precision=4 property float bias  = 0.0f
  @config
  @allowNull=false
  @trueText="On" @falseText="Off"	
  property bool direct = true 

  @config @unit=Units.millisecond property int exTime  = 10

  **
  ** Callback when component is first started in an app.
  **
  virtual override void start()
  {
  	computeConstants()
  }


  **
  ** Execute is called once every scan.
  **
  virtual override void execute()
  {
    if (!enable) return

    long now = Sys.ticks()
        
    // return if not time to execute
    //long executeTime = (1ms *  (long)exTime)
    long deltaTime = now - lastExecTime
    if ( deltaTime < executeTime)
      return;

    lastExecTime = now

    if (kp == 0.0f)
      return;

    // TODO check for valid setpoint and cv

    // calculate execution time as a float in seconds
    float deltaSecs = (float)deltaTime / float1sec

    //  Calculate the current error
    float error = sp - cv

    //  Accumulate the error for integral control
    if (ki != 0.0)
    {
      float iError = deltaSecs * error
      errorSum += iError

      // Constrain the error sum to prevent integral windup
      if (direct)
      {
        if (-errorSum > scaledMax)
          errorSum = -scaledMax
        else if (-errorSum < scaledMin)
          errorSum = -scaledMin
      }
      else
      {
        if (errorSum > scaledMax)
          errorSum = scaledMax
        else if (errorSum < scaledMin)
          errorSum = scaledMin
      }
    }

    //  Calculate the proportional gain
    float proportionalGain = error * kp

    //  Calculate the integral gain
    //  All gain values are calculated in seconds.  Convert integral
    //  term (resets per minute) to resets per second
    float integralGain = kp * ki * errorSum / 60.0f

    //  Calculate the derivative gain
    float derivativeGain = kp * kd * (error - lastError) / deltaSecs

    //  Store the last error for derivative gain
    lastError = error

    //  Calculate the overall gain
    float pv = proportionalGain + integralGain + derivativeGain

    //  Apply action
    if ( direct )
      pv = - pv;

    //  Add bias if not PI
    if (ki == 0.0f)
      pv = pv + bias

    // Constrain the overall gain
    if (pv > max)
      pv = max
    else if (pv < min)
      pv = min

    out = pv
  }


  **
  ** Behavior to execute when a property is changed externally
  ** 
  virtual override void changed(Slot slot)
  {
    if ((slot == PI.kp) ||
        (slot == PI.ki) ||
        (slot == PI.kd) ||
        (slot == PI.max) ||
        (slot == PI.min) ||
        (slot == PI.exTime))
    {
      computeConstants()
    }
    super.changed(slot)    
  }

  private void computeConstants()
  {
    executeTime = (long)exTime * 1ms
    kPkIconst   = kp * ki / 60.0f
    if (kPkIconst==0.0f)
    {
      scaledMax = 0.0f
      scaledMin = 0.0f
    }
    else
    {
      scaledMax = max / kPkIconst
      scaledMin = min / kPkIconst
    }
  }

  // Precalc seldom-changed values for better performance
  private long  executeTime
  private float kPkIconst
  private float scaledMax
  private float scaledMin

  private define float float1sec = (float)1sec
  
  // Values cached between executions
  private long  lastExecTime = 0L
  private float errorSum     = 0.0
  private float lastError    = 0.0
}
